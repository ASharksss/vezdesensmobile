import React, {useEffect, useState, useRef} from 'react';
import Back from "../ui/Back";
import loadGif from '../asserts/load.gif'
import avatarTemplate from '../asserts/on.jpg' // —à–∞–±–ª–æ–Ω —Ñ–æ—Ç–∫–∏
import Input from "../ui/input";
import BlackBtn from "../ui/BlackBtn";
import WhiteBtn from "../ui/WhiteBtn";
import { Navigate, useNavigate,  useParams} from 'react-router-dom'
import axios from 'axios';
import InputMask from 'react-input-mask'
import {AVATAR_HOST, DataURIToBlob} from "../utils"; // –¥–ª—è —Ñ–æ—Ç–æ–∫
import AvatarEditor from 'react-avatar-editor' // —Ñ–æ—Ä–º–∞ –¥–ª—è —Ñ–æ—Ç–∫–∏
import { useSelector } from 'react-redux';
import PreloaderComponent from '../components/Preloader/PreloaderComponent';

const EditProfilePage = () => {
	const {id} = useParams();
	const {user} = useSelector(state => state.user)
	const formData = new FormData();
	const [data, setData] = useState([]);
	const  editImageRef = useRef(null);
	const [image, setImage] = useState(null)
	const [firstName, setFirstName] = useState()
	const [lastName, setLastName] = useState()
	const [email, setEmail] = useState(data.email)
	const [phone, setPhone] = useState(data.phone)
	const [saveImage, setSaveImage] = useState(null)
	const [editImageShow, setEditImageShow] = useState(false)
	const [scale, setScale] = useState(1) //–¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
	const [rotate, setRotate] = useState(0) //–¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
	const [loading, setLoading] = useState(false)
	const navigation = useNavigate();

	const getData = async () => {
		await axios.get(`/api/user/getOneUser/${id}`)
		.then(res => {
			setData(res.data)
			document.title = `–ü—Ä–æ—Ñ–∏–ª—å ${res.data.name}`
			const parts = res.data.name.split(' ');
        	setFirstName(parts[0] || "");
        	setLastName(parts[1] || '');
			setEmail(res.data.email)
			setPhone(res.data.phone)
			// setImage(res.data.userAvatars.length > 0 ? `${AVATAR_HOST}/${res.data.userAvatars[0].name}` : null) // –≤—ã–≤–æ–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
		})
		.catch((err) => {
			console.warn(err);
			alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
		})
		
	}

// —Ä–µ–Ω–¥–µ—Ä —Ñ–æ—Ç–æ
	const toDataURL = name => fetch(`${AVATAR_HOST}/${name}`)
		.then(response => response.blob())
		.then(blob => new Promise((resolve, reject) => {
			const reader = new FileReader()
			reader.onloadend = () => resolve(reader.result)
			reader.onerror = reject
			reader.readAsDataURL(blob)
		}))

	useEffect(() => {
		try {
			if (data.userAvatars.length > 0) {
				toDataURL(data.userAvatars[0].name).then(dataUrl => {
					setImage(dataUrl)
					setSaveImage(dataUrl)
				})
			}
		} catch (e) {
	
		}
	}, [data])
// –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
	const handleCancle = function() {
		window.location.reload();
	}
// –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	const handleSubmit = async(event) => {
		event.preventDefault()
		const fullName = `${firstName} ${lastName}`
		formData.append('name', `${fullName}`)
		formData.append('email', email)
		formData.append('phone', phone)
		if (saveImage !== null) {
			const postImage = DataURIToBlob(saveImage)
			formData.append('avatar', postImage)
		} else {
			formData.append('avatar', saveImage)
		}
		await axios({
			method: 'post',
			url: 'api/user/edit',
			data: formData,
			headers: {"Content-Type": "multipart/form-data"}
		}).then((res) => {
			if (res.data.status === 403) {
				window.alert(res.data.message)
			} else {
				setLoading(false)
				window.location.reload()
			}
		})
			.catch(err => {
				setLoading(false)
				console.log(err)
				window.alert(err.response.data.message)
			})
	}
// –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	useEffect(() => {
		setLoading(true)
		getData(data)
		
	}, [])

	
// —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ
		const handleSaveImage = () => {
			if(editImageRef.current !== null) {
				const canvas = editImageRef.current.getImageScaledToCanvas()
				setSaveImage(canvas.toDataURL())
				setEditImageShow(false)
				setScale(1)
			} else {
				setImage(null)
				setSaveImage(null)
				setScale(1)
				setEditImageShow(false)
			}
		}
// Delete image 
	const handleRemoveImage = () => {
		setImage(null)
		  setSaveImage(null)
		  setScale(1)
	  }
// –≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	  const handleUploadImage = (event) => {
		try {
			const file = event.target.files[0]
			const reader = new FileReader()
			reader.onloadend = () => {
				setImage(reader.result)
			}
			reader.readAsDataURL(file)
		} catch (e) {
			console.log(e)
		}
	}
	// console.log(data) // –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã

// –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ñ–æ—Ç–æ
	if (editImageShow) {
		return (
			<div className={'flex column'}>
				{image !== null ?
				<div style={{position: 'relative', backgroundColor: 'rgba(0,0,0,0.7)', display: 'inline-block', padding: 20}}>
					<AvatarEditor
						ref={(editor) => (editImageRef.current = editor)}
						image={image}
						width={250}
						height={250}
						border={50}
						borderRadius={150}
						color={[0, 0, 0, 0.5]} // RGBA
						scale={scale}
						rotate={rotate}
					/>
					<button className={'editModalImage-btn editModalRemove'}
									onClick={handleRemoveImage}>üóë</button>
					<button className={'editModalImage-btn editModalScalePlus'}
									onClick={()=> setScale(scale + 0.1)} disabled={scale >= 1.5}>+</button>
					{/* <button className={'editModalImage-btn editModalScalePlus'} 		—Ö–∑ –ø–æ—á–µ–º—É –æ–Ω —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç
									onClick={()=> setScale(scale + 0.1)} disabled={scale >= 1.5}>+</button> */} 
					<button className={'editModalImage-btn editModalScaleMinus'}
									onClick={()=> setScale(scale - 0.1)} disabled={scale <= 1}>-</button>
					<button className={'editModalImage-btn editModalRotate'}
									onClick={()=> setRotate(rotate + 90)}>‚Ü∫</button>
				</div> 
				: 
				<input type={'file'} accept={'image/png, image/jpeg'} onChange={handleUploadImage}/> 
				}
				<div className={'row mt-20'}>
					<button onClick={handleSaveImage}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
				</div>
			</div>
		)
	}
	if (data.id && data.id !== user.items.id) {
		// –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ data.id 
		// –ø—Ä–æ–±–ª–µ–º–∞ —Ç–∞–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ç–æ–º —á—Ç–æ –≤ Network —É—Å–ø–µ–≤–∞–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ï—Å–ª–∏ —Ç–∞–º –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö, —Ç–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
		return <Navigate to="/"></Navigate>
	}
	if (!loading) return <PreloaderComponent />
	return (
		<div className='editPAge'>
			<Back/>
			<div className="editProfile_avatar">
				<img src={saveImage !== null ? saveImage : avatarTemplate} alt="" className='editProfile_avatar-img'/>
				<button className='editProfile_avatar-span'  onClick={() => setEditImageShow(true)}>–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ</button>
			</div>
			<form onSubmit={handleSubmit}>
			<div className="editProfile_form column items-center">
				<Input label={'–ò–º—è'} placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} value={firstName} onChangeValue={event => setFirstName(event)}/>
				<Input label={'–§–∞–º–∏–ª–∏—è'} placeholder={'–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é'} value={lastName} onChangeValue={event => setLastName(event)}/>
				<Input label={'–ü–æ—á—Ç–∞'} placeholder={'–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É'} value={email} onChangeValue={event => setEmail(event)}/>
				{/* <Input label={'–¢–µ–ª–µ—Ñ–æ–Ω'} placeholder={'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω'} value={phone} onChangeValue={event => setPhone(event)}/>  –£–±—Ä–∞–ª –ø–æ—Ç–æ–º—É —á—Ç–æ –º–∞—Å–∫–∞ –Ω—É–∂–Ω–∞ */} 
				<div className='input column'>
				<label htmlFor="" className='input_label'>–¢–µ–ª–µ—Ñ–æ–Ω</label>
				<InputMask  placeholder={'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω'} className='input_form usually' 
				value={phone} 
				mask="+7(999)999-99-99"
				onChange={event => setPhone(event.target.value)}/>
				</div>
			</div>
			<div className="editProfile_btns">
				<div className="editProfile_btn">
					<WhiteBtn onClick={handleCancle} size={'w-325px'} children={'–û—Ç–º–µ–Ω–∞'} />
				</div>
				<div className="editProfile_btn">
					<BlackBtn size={'w-325px'} children={'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'} btnType='submit' type={'white_text'}/>
				</div>
			</div>
			</form>
			
		</div>
	);
};



export default EditProfilePage;